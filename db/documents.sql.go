// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: documents.sql

package db

import (
	"context"
)

const documentsInsert = `-- name: DocumentsInsert :exec
INSERT INTO "documents" ("name", "content") VALUES (?, ?)
`

type DocumentsInsertParams struct {
	Name    string
	Content string
}

func (q *Queries) DocumentsInsert(ctx context.Context, arg DocumentsInsertParams) error {
	_, err := q.db.ExecContext(ctx, documentsInsert, arg.Name, arg.Content)
	return err
}

const documentsSelectMany = `-- name: DocumentsSelectMany :many
SELECT "id", "name", "content" FROM "documents"
`

func (q *Queries) DocumentsSelectMany(ctx context.Context) ([]Documents, error) {
	rows, err := q.db.QueryContext(ctx, documentsSelectMany)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Documents
	for rows.Next() {
		var i Documents
		if err := rows.Scan(&i.ID, &i.Name, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const documentsSelectOneByID = `-- name: DocumentsSelectOneByID :one
SELECT "id", "name", "content" FROM "documents" WHERE "id" = ?
`

func (q *Queries) DocumentsSelectOneByID(ctx context.Context, id int64) (Documents, error) {
	row := q.db.QueryRowContext(ctx, documentsSelectOneByID, id)
	var i Documents
	err := row.Scan(&i.ID, &i.Name, &i.Content)
	return i, err
}
